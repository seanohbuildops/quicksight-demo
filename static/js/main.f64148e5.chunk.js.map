{"version":3,"sources":["auth/auth-service.js","InviteTenantAdmin.js","Dashboard.js","EmbedDashboard.js","App.js","serviceWorker.js","index.js"],"names":["getDashboardURL","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","email","dashboardId","wrap","_context2","prev","next","abrupt","fetch","then","response","json","stop","_x4","_x5","apply","this","arguments","makeStyles","theme","margin","spacing","paper","flexDirection","alignItems","padding","width","QuickSightEmbedding","require","React","Component","EmbedDashboard","dashboardContainer","createRef","dashboardUrl","dashboard","state","error","isLoading","embedDashboard","embedUrl","container","_this","url","_this2","data","console","log","current","catch","err","setState","finally","nextProps","nextState","props","deleteChildren","node","firstChild","removeChild","react_default","createElement","ref","App","embedUrlInput","handleSubmit","e","preventDefault","handleChange","target","value","onSubmit","type","name","onChange","EmbedDashboard_EmbedDashboard","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAIaA,EAAe,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAOC,GAAd,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACtBC,MAAM,8FACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFA,wBAAAP,EAAAQ,SAAAZ,MAAH,gBAAAa,EAAAC,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,gDCIVC,YAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNA,OAAQD,EAAME,QAAQ,IAExBC,MAAO,CACLC,cAAe,SACfC,WAAY,SACZC,QAASN,EAAME,QAAQ,GACvBK,MAAO,QACPN,OAAQ,WCfZ,IAAIO,EAAsBC,EAAQ,ICC9BD,GDCmCE,IAAMC,UCDnBF,EAAQ,KAGbG,6MAEnBC,mBAAqBH,IAAMI,cAC3BC,aAAe,KACfC,UAAY,OAEZC,MAAQ,CACNC,OAAO,EACPC,WAAW,KA+BbC,eAAiB,SAACC,EAAUC,GACtBD,IACJE,EAAKP,UAAYR,EAAoBY,eAAe,CAClDI,IAAKH,EACLC,mGAhCe,IAAAG,EAAA5B,KACjBvB,EAAgB,GAAI,IACnBgB,KAAK,SAAAoC,GACJC,QAAQC,IAAIF,GACZD,EAAKL,eAAeM,EAAMD,EAAKZ,mBAAmBgB,WAEnDC,MAAM,SAAAC,GACLN,EAAKO,SAAS,CAACd,OAAO,IACtBS,QAAQC,IAAIG,KAEbE,QAAQ,kBAAMR,EAAKO,SAAS,CAACb,WAAW,oDAGrBe,EAAWC,GAK/B,OAJGtC,KAAKuC,MAAMZ,MAAQU,EAAUV,MAC9B3B,KAAKwC,eAAexC,KAAKgB,mBAAmBgB,SAC5ChC,KAAKuB,eAAec,EAAUV,IAAK3B,KAAKgB,mBAAmBgB,WAEtD,yCAGMS,GACb,KAAMA,EAAKC,YACTD,EAAKE,YAAYF,EAAKC,YAExBZ,QAAQC,IAAIU,oCAYZ,OACEG,EAAA9D,EAAA+D,cAAA,OAAKC,IAAK9C,KAAKgB,4BAjDuBF,aCWvBiC,6MAEnB/B,mBAAqBH,IAAMI,cAE3BG,MAAQ,CACNI,SAAU,KACVwB,cAAe,MAGjBC,aAAe,SAAAC,GACbA,EAAEC,iBACFzB,EAAKS,SAAS,CACZa,cAAe,GACfxB,SAAUE,EAAKN,MAAM4B,mBAIzBI,aAAe,SAAAF,GACbxB,EAAKS,SAAS,CAAEa,cAAeE,EAAEG,OAAOC,iFAIxC,OACEV,EAAA9D,EAAA+D,cAAA,WACED,EAAA9D,EAAA+D,cAAA,QAAMU,SAAUvD,KAAKiD,cACnBL,EAAA9D,EAAA+D,cAAA,0BAEED,EAAA9D,EAAA+D,cAAA,SAAOW,KAAK,OAAOC,KAAK,gBAAgBC,SAAU1D,KAAKoD,gBAEzDR,EAAA9D,EAAA+D,cAAA,SAAOW,KAAK,SAASF,MAAM,YAE7BV,EAAA9D,EAAA+D,cAACc,EAAD,CAAgBhC,IAAK3B,KAAKoB,MAAMI,mBA/BPX,IAAMC,WCLnB8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAA9D,EAAA+D,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAAAgF,GACjCA,EAAaC","file":"static/js/main.f64148e5.chunk.js","sourcesContent":["export const addTenantAdmin = async (username, email, tenantIdentifier) => { \n  return Promise.resolve();\n};\n\nexport const getDashboardURL = async (email, dashboardId) => {\n  return fetch('https://22981a99d3.execute-api.us-east-1.amazonaws.com/Prod/quicksight-dashboard-embed-url')\n    .then(response => response.json())\n};\n\nexport const logout = async () => {\n  return Promise.resolve();\n};\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { addTenantAdmin } from './auth/auth-service';\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  paper: {\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n    width: '200px',\n    margin: 'auto'\n  },\n}));\n\nexport default function InviteTenantAdmin(){\n\n  const classes = useStyles();\n\n  const [values, setValues] = React.useState({\n    username: '',\n    email: '',\n    tenantid: '',\n  });\n\n  const handleChange = name => e => {\n    setValues({\n      ...values,\n      [name]: e.target.value\n    });\n  }\n\n  const handleSubmit = e => {\n    // need to call AdminAddUser\n    addTenantAdmin(values.username, values.email, values.tenantid);\n    e.preventDefault();\n  }\n\n  return (\n    <Paper className={classes.paper}>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          label='Username'\n          onChange={handleChange('username')}\n          type='text'\n          fullWidth\n          margin='normal'\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <TextField\n          type='email'\n          onChange={handleChange('email')}\n          label='Email'\n          fullWidth\n          margin='normal'\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <TextField\n          label='Tenant Identifier'\n          onChange={handleChange('tenantid')}\n          type='text'\n          fullWidth\n          margin='normal'\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <Button\n          type='submit'\n          color='primary'\n          variant='contained'\n          className={classes.margin}\n        >\n          Submit\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { getDashboardURL } from './auth/auth-service';\nvar QuickSightEmbedding = require('amazon-quicksight-embedding-sdk');\n\nexport default class Dashboard extends React.Component {\n\n  state = {\n    isLoading: false,\n    embedUrl: null,\n    error: false,\n  }\n\n  componentDidMount(){\n    this.setState({isLoading: true});\n    let { dashboardId } = this.props;\n\n    getDashboardURL('', '')\n    .then(data => this.setState({embedUrl: data}))\n    .catch(err => {\n      this.setState({error: true})\n      console.log(err);\n    })\n    .finally(() => this.setState({isLoading: false}));\n  }\n\n  render() {\n    var options = {};\n    if(this.state.embedUrl){\n      options = {\n        url: this.state.embedUrl,\n        container: document.getElementById('dashboardContainer'),\n      };\n\n      /*\n      options.url = \n      */\n\n      QuickSightEmbedding.embedDashboard(options);\n    }\n\n    return (\n      <div id='dashboardContainer'>\n        { (this.state.isLoading) ?  <p>Loading...</p> : null }\n        { (this.state.error) ?  <p>Error</p> : null }\n      </div>\n    );\n  }\n};\n","import React, { Component } from 'react';\nimport { getDashboardURL } from './auth/auth-service';\n\nvar QuickSightEmbedding = require('amazon-quicksight-embedding-sdk');\n\n\nexport default class EmbedDashboard extends Component {\n\n  dashboardContainer = React.createRef();\n  dashboardUrl = '';\n  dashboard = null;\n\n  state = {\n    error: false,\n    isLoading: false,\n  }\n\n  componentDidMount(){\n    getDashboardURL('', '')\n    .then(data => {\n      console.log(data);\n      this.embedDashboard(data, this.dashboardContainer.current);\n    })\n    .catch(err => {\n      this.setState({error: true})\n      console.log(err);\n    })\n    .finally(() => this.setState({isLoading: false}));\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.props.url !== nextProps.url){\n      this.deleteChildren(this.dashboardContainer.current);\n      this.embedDashboard(nextProps.url, this.dashboardContainer.current)\n    }\n    return false;\n  }\n\n  deleteChildren(node){\n    while(node.firstChild){\n      node.removeChild(node.firstChild);\n    }\n    console.log(node);\n  }\n\n  embedDashboard = (embedUrl, container) => {\n    if(!embedUrl) return;\n    this.dashboard = QuickSightEmbedding.embedDashboard({\n      url: embedUrl,\n      container\n    })\n  };\n\n  render() {\n    return (\n      <div ref={this.dashboardContainer}/>\n    );\n  }\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Dialog from '@material-ui/core/Dialog';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport LogoutButton from './auth/LogoutButton';\nimport InviteTenantAdmin from './InviteTenantAdmin';\nimport Dashboard from './Dashboard';\nimport EmbedDashboard from './EmbedDashboard';\n\nexport default class App extends React.Component {\n\n  dashboardContainer = React.createRef();\n\n  state = {\n    embedUrl: null,\n    embedUrlInput: '',\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({\n      embedUrlInput: '',\n      embedUrl: this.state.embedUrlInput\n    });\n  };\n\n  handleChange = e => {\n    this.setState({ embedUrlInput: e.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Embed Url:\n            <input type='text' name='embedUrlInput' onChange={this.handleChange}/>\n          </label>\n          <input type='submit' value='Submit'/>\n        </form>\n        <EmbedDashboard url={this.state.embedUrl}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}